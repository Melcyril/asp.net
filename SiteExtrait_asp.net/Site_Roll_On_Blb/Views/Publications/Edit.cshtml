@model Site_Roll_On_Blb.Models.Publication
@using Site_Roll_On_Blb.Models;
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    List<PublicationImage> images = ViewBag.ListeImage;
    int i = 0;


    string stock = "";
    string[] tabextension;

    int dernierpoint = 0;
    int indice;
    string extension = "";
    string url = "";

}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Edit</title>
</head>
<body>
    <div class="row">
        <div class="col-md-6 editpublication">
            @using (Html.BeginForm("edit", "Publications", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    <h1 class="center">Publication</h1>
                    <hr />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.idPublication)

                    <div class="form-group">
                        @Html.LabelFor(model => model.idTypePublication, "idTypePublication", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("idTypePublication", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.idTypePublication, "", new { @class = "text-danger" })
                        </div>
                    </div>


                    <div class="form-group">
                        @Html.LabelFor(model => model.datePrevisionPublication, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.datePrevisionPublication, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.datePrevisionPublication, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.titrePublication, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.titrePublication, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.titrePublication, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.sousTitrePublication, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.sousTitrePublication, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.sousTitrePublication, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @*<div class="form-group">
                            @Html.LabelFor(model => model.souscontenuPublication, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.souscontenuPublication, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.souscontenuPublication, "", new { @class = "text-danger" })
                            </div>
                        </div>*@

                    <div class="form-group">
                        @Html.LabelFor(model => model.contenuPublication, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @*@Html.EditorFor(model => model.contenuPublication, new { htmlAttributes = new { @class = "form-control" } })*@
                            @*<textarea id="contenuPublication" name="contenuPublication" rows="5" cols="33" value=""></textarea>*@
                            @Html.TextAreaFor(model => model.contenuPublication, new { @class = "form-control", rows = "5", cols = "33" })
                            @Html.ValidationMessageFor(model => model.contenuPublication, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.urlPublication, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.urlPublication, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                            @Html.ValidationMessageFor(model => model.urlPublication, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-10" id="file1">

                            <input type="file" id="filesPub" name="filesPub" multiple>
                        </div>
                    </div>
                    <div id="image"></div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.idStatut, "idStatut", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("idStatut", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.idStatut, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.visiblePublication, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.visiblePublication, new { htmlAttributes = new { @class = "form-control", min = 0, max = 1, Value = 1 } })
                            @Html.ValidationMessageFor(model => model.visiblePublication, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @*<div class="form-group">
                        @Html.LabelFor(model => model.idUtilisateur, "idUtilisateur", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("idUtilisateur", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.idUtilisateur, "", new { @class = "text-danger" })
                        </div>
                    </div>*@

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Save" class="btn btn-default" />
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="listeimage col-md-6">
            @foreach (var item in images)
            {

                @:<div id="image_@item.idPublicationImage">
                    @:<div class="row">
                        @:<div class="col-md-6">
                            //recherche de l'extension
                            tabextension = item.urlPublicationImage.Split('.');
                            dernierpoint = tabextension.Count();
                            indice = dernierpoint - 1;
                            extension = tabextension[indice].ToLower();
                            url = "/" + item.urlPublicationImage;
                            //comparaison de l'extension du fichier pour reconaitre si c'est une photo ou une video
                            if (extension.Equals("jpg") || extension.Equals("jpeg") || extension.Equals("gif") || extension.Equals("png"))
                            {

                                <img class="img_article_liste" src="@url" width="100px">
                                <a href="javascript:void(0)" onclick="supprimerpublication(@item.idPublicationImage)">Supprimer</a>

                                <br />
                            }
                            else if (extension.Equals("3gp") || extension.Equals("avi") || extension.Equals("mov") || extension.Equals("mp4"))
                            {
                                <video controls width="100px">
                                    <source src="@url" type="video/mp4" />
                                </video>
                                <a href="javascript:void(0)" onclick="supprimerpublication(@item.idPublicationImage)">Supprimer</a>
                            }
                        @:</div>


                    @:</div>
                @:</div>
            }
        </div>
        <div>
            @Html.ActionLink("Back to List", "Index")
        </div>
    </div>
</body>
</html>
